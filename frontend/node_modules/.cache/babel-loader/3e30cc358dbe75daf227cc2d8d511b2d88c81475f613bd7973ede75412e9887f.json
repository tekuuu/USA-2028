{"ast":null,"code":"import { ethers } from 'ethers';\nimport CONTRACT_ABI from './contractABI.json';\nexport class VotingContract {\n  constructor(signer) {\n    // Contract address - this should be updated after deployment\n    this.contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS || '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n    this.contract = new ethers.Contract(this.contractAddress, CONTRACT_ABI, signer);\n    this.signer = signer;\n  }\n\n  // Get contract owner\n  async getOwner() {\n    return await this.contract.owner();\n  }\n\n  // Get voting state\n  async getVotingState() {\n    const state = await this.contract.getVotingState();\n    return parseInt(state);\n  }\n\n  // Get party information\n  async getParty(partyId) {\n    const party = await this.contract.getParty(partyId);\n    return {\n      name: party[0],\n      candidateName: party[1],\n      exists: party[2]\n    };\n  }\n\n  // Get total party count\n  async getPartyCount() {\n    const count = await this.contract.getPartyCount();\n    return parseInt(count);\n  }\n\n  // Check if voter is registered\n  async isVoterRegistered(voterAddress) {\n    return await this.contract.isVoterRegistered(voterAddress);\n  }\n\n  // Check if voter has voted\n  async hasVoted(voterAddress) {\n    return await this.contract.hasVoted(voterAddress);\n  }\n\n  // Get total votes\n  async getTotalVotes() {\n    const votes = await this.contract.getTotalVotes();\n    return parseInt(votes);\n  }\n\n  // Get registered voters count\n  async getRegisteredVotersCount() {\n    const count = await this.contract.getRegisteredVotersCount();\n    return parseInt(count);\n  }\n\n  // Get vote count for a party\n  async getVoteCount(partyId) {\n    const count = await this.contract.getVoteCount(partyId);\n    return parseInt(count);\n  }\n\n  // Cast a vote\n  async castVote(partyId) {\n    const tx = await this.contract.castVote(partyId);\n    return await tx.wait();\n  }\n\n  // Admin functions\n  async startVoting(durationInMinutes) {\n    const tx = await this.contract.startVoting(durationInMinutes);\n    return await tx.wait();\n  }\n  async endVoting() {\n    const tx = await this.contract.endVoting();\n    return await tx.wait();\n  }\n  async registerVoter(voterAddress) {\n    const tx = await this.contract.registerVoter(voterAddress);\n    return await tx.wait();\n  }\n  async registerMultipleVoters(voterAddresses) {\n    const tx = await this.contract.registerMultipleVoters(voterAddresses);\n    return await tx.wait();\n  }\n  async addParty(name, candidate) {\n    const tx = await this.contract.addParty(name, candidate);\n    return await tx.wait();\n  }\n\n  // Listen to events\n  onVotingStarted(callback) {\n    this.contract.on('VotingStarted', callback);\n  }\n  onVotingEnded(callback) {\n    this.contract.on('VotingEnded', callback);\n  }\n  onVoteCast(callback) {\n    this.contract.on('VoteCast', callback);\n  }\n  onVoterRegistered(callback) {\n    this.contract.on('VoterRegistered', callback);\n  }\n\n  // Remove event listeners\n  removeAllListeners() {\n    this.contract.removeAllListeners();\n  }\n}","map":{"version":3,"names":["ethers","CONTRACT_ABI","VotingContract","constructor","signer","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","contract","Contract","getOwner","owner","getVotingState","state","parseInt","getParty","partyId","party","name","candidateName","exists","getPartyCount","count","isVoterRegistered","voterAddress","hasVoted","getTotalVotes","votes","getRegisteredVotersCount","getVoteCount","castVote","tx","wait","startVoting","durationInMinutes","endVoting","registerVoter","registerMultipleVoters","voterAddresses","addParty","candidate","onVotingStarted","callback","on","onVotingEnded","onVoteCast","onVoterRegistered","removeAllListeners"],"sources":["/home/zoe/USA-2028/frontend/src/contracts/VotingContract.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport CONTRACT_ABI from './contractABI.json';\n\nexport class VotingContract {\n  constructor(signer) {\n    // Contract address - this should be updated after deployment\n    this.contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS || '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n    this.contract = new ethers.Contract(this.contractAddress, CONTRACT_ABI, signer);\n    this.signer = signer;\n  }\n\n  // Get contract owner\n  async getOwner() {\n    return await this.contract.owner();\n  }\n\n  // Get voting state\n  async getVotingState() {\n    const state = await this.contract.getVotingState();\n    return parseInt(state);\n  }\n\n  // Get party information\n  async getParty(partyId) {\n    const party = await this.contract.getParty(partyId);\n    return {\n      name: party[0],\n      candidateName: party[1],\n      exists: party[2]\n    };\n  }\n\n  // Get total party count\n  async getPartyCount() {\n    const count = await this.contract.getPartyCount();\n    return parseInt(count);\n  }\n\n  // Check if voter is registered\n  async isVoterRegistered(voterAddress) {\n    return await this.contract.isVoterRegistered(voterAddress);\n  }\n\n  // Check if voter has voted\n  async hasVoted(voterAddress) {\n    return await this.contract.hasVoted(voterAddress);\n  }\n\n  // Get total votes\n  async getTotalVotes() {\n    const votes = await this.contract.getTotalVotes();\n    return parseInt(votes);\n  }\n\n  // Get registered voters count\n  async getRegisteredVotersCount() {\n    const count = await this.contract.getRegisteredVotersCount();\n    return parseInt(count);\n  }\n\n  // Get vote count for a party\n  async getVoteCount(partyId) {\n    const count = await this.contract.getVoteCount(partyId);\n    return parseInt(count);\n  }\n\n  // Cast a vote\n  async castVote(partyId) {\n    const tx = await this.contract.castVote(partyId);\n    return await tx.wait();\n  }\n\n  // Admin functions\n  async startVoting(durationInMinutes) {\n    const tx = await this.contract.startVoting(durationInMinutes);\n    return await tx.wait();\n  }\n\n  async endVoting() {\n    const tx = await this.contract.endVoting();\n    return await tx.wait();\n  }\n\n  async registerVoter(voterAddress) {\n    const tx = await this.contract.registerVoter(voterAddress);\n    return await tx.wait();\n  }\n\n  async registerMultipleVoters(voterAddresses) {\n    const tx = await this.contract.registerMultipleVoters(voterAddresses);\n    return await tx.wait();\n  }\n\n  async addParty(name, candidate) {\n    const tx = await this.contract.addParty(name, candidate);\n    return await tx.wait();\n  }\n\n\n\n  // Listen to events\n  onVotingStarted(callback) {\n    this.contract.on('VotingStarted', callback);\n  }\n\n  onVotingEnded(callback) {\n    this.contract.on('VotingEnded', callback);\n  }\n\n  onVoteCast(callback) {\n    this.contract.on('VoteCast', callback);\n  }\n\n  onVoterRegistered(callback) {\n    this.contract.on('VoterRegistered', callback);\n  }\n\n  // Remove event listeners\n  removeAllListeners() {\n    this.contract.removeAllListeners();\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{ethers}from'ethers';// Contract ABI - This would be generated from the compiled contract\nconst CONTRACT_ABI=[\"function getVotingState() external view returns (uint8)\",\"function getParty(uint256 partyId) external view returns (string memory name, string memory candidate, bool exists)\",\"function getPartyCount() external view returns (uint256)\",\"function isVoterRegistered(address voter) external view returns (bool)\",\"function hasVoted(address voter) external view returns (bool)\",\"function getTotalVotes() external view returns (uint256)\",\"function getRegisteredVotersCount() external view returns (uint256)\",\"function getVoteCount(uint256 partyId) external view returns (uint256)\",\"function castVote(uint256 partyId) external\",\"function startVoting(uint256 durationInMinutes) external\",\"function endVoting() external\",\"function registerVoter(address voter) external\",\"function registerMultipleVoters(address[] memory voterAddresses) external\",\"function addParty(string memory name, string memory candidate) external\",\"function owner() external view returns (address)\",\"event VotingStarted(uint256 startTime, uint256 duration)\",\"event VotingEnded(uint256 endTime)\",\"event VoterRegistered(address voter)\",\"event VoteCast(address voter, uint256 partyId)\",\"event PartyAdded(uint256 partyId, string name, string candidate)\"];export class VotingContract{constructor(signer){// Contract address - this should be updated after deployment\nthis.contractAddress=process.env.REACT_APP_CONTRACT_ADDRESS||'0x5FbDB2315678afecb367f032d93F642f64180aa3';this.contract=new ethers.Contract(this.contractAddress,CONTRACT_ABI,signer);this.signer=signer;}// Get contract owner\nasync getOwner(){return await this.contract.owner();}// Get voting state\nasync getVotingState(){const state=await this.contract.getVotingState();return parseInt(state);}// Get party information\nasync getParty(partyId){const party=await this.contract.getParty(partyId);return{name:party[0],candidateName:party[1],exists:party[2]};}// Get total party count\nasync getPartyCount(){const count=await this.contract.getPartyCount();return parseInt(count);}// Check if voter is registered\nasync isVoterRegistered(voterAddress){return await this.contract.isVoterRegistered(voterAddress);}// Check if voter has voted\nasync hasVoted(voterAddress){return await this.contract.hasVoted(voterAddress);}// Get total votes\nasync getTotalVotes(){const votes=await this.contract.getTotalVotes();return parseInt(votes);}// Get registered voters count\nasync getRegisteredVotersCount(){const count=await this.contract.getRegisteredVotersCount();return parseInt(count);}// Get vote count for a party\nasync getVoteCount(partyId){const count=await this.contract.getVoteCount(partyId);return parseInt(count);}// Cast a vote\nasync castVote(partyId){const tx=await this.contract.castVote(partyId);return await tx.wait();}// Admin functions\nasync startVoting(durationInMinutes){const tx=await this.contract.startVoting(durationInMinutes);return await tx.wait();}async endVoting(){const tx=await this.contract.endVoting();return await tx.wait();}async registerVoter(voterAddress){const tx=await this.contract.registerVoter(voterAddress);return await tx.wait();}async registerMultipleVoters(voterAddresses){const tx=await this.contract.registerMultipleVoters(voterAddresses);return await tx.wait();}async addParty(name,candidate){const tx=await this.contract.addParty(name,candidate);return await tx.wait();}// Listen to events\nonVotingStarted(callback){this.contract.on('VotingStarted',callback);}onVotingEnded(callback){this.contract.on('VotingEnded',callback);}onVoteCast(callback){this.contract.on('VoteCast',callback);}onVoterRegistered(callback){this.contract.on('VoterRegistered',callback);}// Remove event listeners\nremoveAllListeners(){this.contract.removeAllListeners();}}","map":{"version":3,"names":["ethers","CONTRACT_ABI","VotingContract","constructor","signer","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","contract","Contract","getOwner","owner","getVotingState","state","parseInt","getParty","partyId","party","name","candidateName","exists","getPartyCount","count","isVoterRegistered","voterAddress","hasVoted","getTotalVotes","votes","getRegisteredVotersCount","getVoteCount","castVote","tx","wait","startVoting","durationInMinutes","endVoting","registerVoter","registerMultipleVoters","voterAddresses","addParty","candidate","onVotingStarted","callback","on","onVotingEnded","onVoteCast","onVoterRegistered","removeAllListeners"],"sources":["/home/zoe/USA-2028/frontend/src/contracts/VotingContract.js"],"sourcesContent":["import { ethers } from 'ethers';\n\n// Contract ABI - This would be generated from the compiled contract\nconst CONTRACT_ABI = [\n  \"function getVotingState() external view returns (uint8)\",\n  \"function getParty(uint256 partyId) external view returns (string memory name, string memory candidate, bool exists)\",\n  \"function getPartyCount() external view returns (uint256)\",\n  \"function isVoterRegistered(address voter) external view returns (bool)\",\n  \"function hasVoted(address voter) external view returns (bool)\",\n  \"function getTotalVotes() external view returns (uint256)\",\n  \"function getRegisteredVotersCount() external view returns (uint256)\",\n  \"function getVoteCount(uint256 partyId) external view returns (uint256)\",\n  \"function castVote(uint256 partyId) external\",\n  \"function startVoting(uint256 durationInMinutes) external\",\n  \"function endVoting() external\",\n  \"function registerVoter(address voter) external\",\n  \"function registerMultipleVoters(address[] memory voterAddresses) external\",\n  \"function addParty(string memory name, string memory candidate) external\",\n  \"function owner() external view returns (address)\",\n  \"event VotingStarted(uint256 startTime, uint256 duration)\",\n  \"event VotingEnded(uint256 endTime)\",\n  \"event VoterRegistered(address voter)\",\n  \"event VoteCast(address voter, uint256 partyId)\",\n  \"event PartyAdded(uint256 partyId, string name, string candidate)\"\n];\n\nexport class VotingContract {\n  constructor(signer) {\n    // Contract address - this should be updated after deployment\n    this.contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS || '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n    this.contract = new ethers.Contract(this.contractAddress, CONTRACT_ABI, signer);\n    this.signer = signer;\n  }\n\n  // Get contract owner\n  async getOwner() {\n    return await this.contract.owner();\n  }\n\n  // Get voting state\n  async getVotingState() {\n    const state = await this.contract.getVotingState();\n    return parseInt(state);\n  }\n\n  // Get party information\n  async getParty(partyId) {\n    const party = await this.contract.getParty(partyId);\n    return {\n      name: party[0],\n      candidateName: party[1],\n      exists: party[2]\n    };\n  }\n\n  // Get total party count\n  async getPartyCount() {\n    const count = await this.contract.getPartyCount();\n    return parseInt(count);\n  }\n\n  // Check if voter is registered\n  async isVoterRegistered(voterAddress) {\n    return await this.contract.isVoterRegistered(voterAddress);\n  }\n\n  // Check if voter has voted\n  async hasVoted(voterAddress) {\n    return await this.contract.hasVoted(voterAddress);\n  }\n\n  // Get total votes\n  async getTotalVotes() {\n    const votes = await this.contract.getTotalVotes();\n    return parseInt(votes);\n  }\n\n  // Get registered voters count\n  async getRegisteredVotersCount() {\n    const count = await this.contract.getRegisteredVotersCount();\n    return parseInt(count);\n  }\n\n  // Get vote count for a party\n  async getVoteCount(partyId) {\n    const count = await this.contract.getVoteCount(partyId);\n    return parseInt(count);\n  }\n\n  // Cast a vote\n  async castVote(partyId) {\n    const tx = await this.contract.castVote(partyId);\n    return await tx.wait();\n  }\n\n  // Admin functions\n  async startVoting(durationInMinutes) {\n    const tx = await this.contract.startVoting(durationInMinutes);\n    return await tx.wait();\n  }\n\n  async endVoting() {\n    const tx = await this.contract.endVoting();\n    return await tx.wait();\n  }\n\n  async registerVoter(voterAddress) {\n    const tx = await this.contract.registerVoter(voterAddress);\n    return await tx.wait();\n  }\n\n  async registerMultipleVoters(voterAddresses) {\n    const tx = await this.contract.registerMultipleVoters(voterAddresses);\n    return await tx.wait();\n  }\n\n  async addParty(name, candidate) {\n    const tx = await this.contract.addParty(name, candidate);\n    return await tx.wait();\n  }\n\n\n\n  // Listen to events\n  onVotingStarted(callback) {\n    this.contract.on('VotingStarted', callback);\n  }\n\n  onVotingEnded(callback) {\n    this.contract.on('VotingEnded', callback);\n  }\n\n  onVoteCast(callback) {\n    this.contract.on('VoteCast', callback);\n  }\n\n  onVoterRegistered(callback) {\n    this.contract.on('VoterRegistered', callback);\n  }\n\n  // Remove event listeners\n  removeAllListeners() {\n    this.contract.removeAllListeners();\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}